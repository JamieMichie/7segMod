
7segClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000570  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800182  00800182  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001445  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c72  00000000  00000000  00001be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069f  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a8  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e6  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 e7       	ldi	r30, 0x70	; 112
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 38       	cpi	r26, 0x82	; 130
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e8       	ldi	r26, 0x82	; 130
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 39       	cpi	r26, 0x96	; 150
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 32 02 	call	0x464	; 0x464 <main>
  e2:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <SPI_MasterInit>:
}
void toggleCS1(void){
	PORTD ^= (1 << PORTD1);
}
void toggleCS2(void){
	PORTD ^= (1 << PORTD0);
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	84 b9       	out	0x04, r24	; 4
  ee:	83 e2       	ldi	r24, 0x23	; 35
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	82 e5       	ldi	r24, 0x52	; 82
  f4:	8c bd       	out	0x2c, r24	; 44
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	08 95       	ret

000000fc <SPI_Transmit>:
  fc:	8e bd       	out	0x2e, r24	; 46
  fe:	0d b4       	in	r0, 0x2d	; 45
 100:	07 fe       	sbrs	r0, 7
 102:	fd cf       	rjmp	.-6      	; 0xfe <SPI_Transmit+0x2>
 104:	08 95       	ret

00000106 <toggleCS>:
 106:	9b b1       	in	r25, 0x0b	; 11
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	89 27       	eor	r24, r25
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret

00000110 <Display_Init>:
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	83 60       	ori	r24, 0x03	; 3
 114:	8b b9       	out	0x0b, r24	; 11
 116:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 126:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	9c e9       	ldi	r25, 0x9C	; 156
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <Display_Init+0x1e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <Display_Init+0x24>
 134:	00 00       	nop
 136:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 146:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <Display_Init+0x3e>
 152:	00 c0       	rjmp	.+0      	; 0x154 <Display_Init+0x44>
 154:	00 00       	nop
 156:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 160:	8f e0       	ldi	r24, 0x0F	; 15
 162:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 166:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9c e9       	ldi	r25, 0x9C	; 156
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <Display_Init+0x5e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Display_Init+0x64>
 174:	00 00       	nop
 176:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 186:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9c e9       	ldi	r25, 0x9C	; 156
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <Display_Init+0x7e>
 192:	00 c0       	rjmp	.+0      	; 0x194 <Display_Init+0x84>
 194:	00 00       	nop
 196:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
 1a6:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 1aa:	08 95       	ret

000001ac <Uart_Init>:
void Uart_Init(void){
	//Function to configure uart port 1 for asynchronous serial communication
	// PD2 = RXD1 PD3 = TXD1
	
	//enable receiver and transmitter
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
 1ac:	e9 ec       	ldi	r30, 0xC9	; 201
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 61       	ori	r24, 0x18	; 24
 1b4:	80 83       	st	Z, r24
	//Set frame format 8bit, 1 stop bits
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
	UCSR1B |=  (1 << RXCIE1);
 1bc:	80 81       	ld	r24, Z
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	80 83       	st	Z, r24
	UBRR1H = (unsigned char)(PRESCALER >> 8);
 1c2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
	UBRR1L = (unsigned char)(PRESCALER);
 1c6:	87 e6       	ldi	r24, 0x67	; 103
 1c8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	sei();
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <usart_putc>:
}
void usart_putc(char cdata){
	/* Wait for empty transmit buffer */
	while(!(UCSR1A & (1<<UDRE1)))
 1d0:	e8 ec       	ldi	r30, 0xC8	; 200
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	90 81       	ld	r25, Z
 1d6:	95 ff       	sbrs	r25, 5
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <usart_putc+0x4>
	;
	/*Put data into the buffer and send */
	UDR1 = cdata;
 1da:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
 1de:	08 95       	ret

000001e0 <usart_puts>:
}
void usart_puts(const char *send){
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
	while(*send){
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <usart_puts+0x18>
 1ec:	21 96       	adiw	r28, 0x01	; 1
		usart_putc(*send++);
 1ee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <usart_putc>
	;
	/*Put data into the buffer and send */
	UDR1 = cdata;
}
void usart_puts(const char *send){
	while(*send){
 1f2:	89 91       	ld	r24, Y+
 1f4:	81 11       	cpse	r24, r1
 1f6:	fb cf       	rjmp	.-10     	; 0x1ee <usart_puts+0xe>
		usart_putc(*send++);
	}
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <Display_brightness>:
}
void toggleCS2(void){
	PORTD ^= (1 << PORTD0);
	
}
void Display_brightness(uint8_t uval){
 1fe:	cf 93       	push	r28
 200:	c8 2f       	mov	r28, r24
	if(uval >= 0 && uval <= 14){
 202:	8f 30       	cpi	r24, 0x0F	; 15
 204:	58 f4       	brcc	.+22     	; 0x21c <Display_brightness+0x1e>
		toggleCS();
 206:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
		SPI_Transmit(INTENSITY_ADDRESS);
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
		SPI_Transmit(uval);
 210:	8c 2f       	mov	r24, r28
 212:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
		toggleCS();
 216:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
 21a:	0e c0       	rjmp	.+28     	; 0x238 <Display_brightness+0x3a>
	}else{
		usart_puts("Invalid value setting to 1 \n\r");
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
		toggleCS();
 224:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
		SPI_Transmit(INTENSITY_ADDRESS);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
		SPI_Transmit(0x01);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Transmit>
		toggleCS();
 234:	0e 94 83 00 	call	0x106	; 0x106 <toggleCS>
	}
	
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <usart_ok>:
	while(*send){
		usart_putc(*send++);
	}
}
void usart_ok(void){
	usart_puts("OK\r\n");
 23c:	8e e1       	ldi	r24, 0x1E	; 30
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
 244:	08 95       	ret

00000246 <__vector_25>:
}
ISR(USART1_RX_vect){
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	data_in[data_count] = UDR1;
 268:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <data_count>
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	ae ec       	ldi	r26, 0xCE	; 206
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	8c 91       	ld	r24, X
 274:	e3 57       	subi	r30, 0x73	; 115
 276:	fe 4f       	sbci	r31, 0xFE	; 254
 278:	80 83       	st	Z, r24
	usart_putc(UDR1);
 27a:	8c 91       	ld	r24, X
 27c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <usart_putc>
	if(data_in[data_count] == '\n' || data_in[data_count] == '\r'){
 280:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <data_count>
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	e3 57       	subi	r30, 0x73	; 115
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	80 81       	ld	r24, Z
 28c:	8a 30       	cpi	r24, 0x0A	; 10
 28e:	41 f0       	breq	.+16     	; 0x2a0 <__vector_25+0x5a>
 290:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <data_count>
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e3 57       	subi	r30, 0x73	; 115
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	80 81       	ld	r24, Z
 29c:	8d 30       	cpi	r24, 0x0D	; 13
 29e:	31 f4       	brne	.+12     	; 0x2ac <__vector_25+0x66>
		command_ready = TRUE;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <command_ready>
		data_count = 0;
 2a6:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <data_count>
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__vector_25+0x70>
	}else{
		data_count++;
 2ac:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <data_count>
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <data_count>
	}
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <command_copy>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2d8:	f8 94       	cli

void command_copy(void){
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		memcpy(command_in, data_in, 8);
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	ed e8       	ldi	r30, 0x8D	; 141
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	a5 e8       	ldi	r26, 0x85	; 133
 2e2:	b1 e0       	ldi	r27, 0x01	; 1
 2e4:	01 90       	ld	r0, Z+
 2e6:	0d 92       	st	X+, r0
 2e8:	8a 95       	dec	r24
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <command_copy+0xc>
		//Clear data_in for next console command
		memset(data_in[0], 0, 8);
 2ec:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <data_in>
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	88 e0       	ldi	r24, 0x08	; 8
 2f4:	df 01       	movw	r26, r30
 2f6:	1d 92       	st	X+, r1
 2f8:	8a 95       	dec	r24
 2fa:	e9 f7       	brne	.-6      	; 0x2f6 <command_copy+0x1e>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2fc:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 2fe:	08 95       	ret

00000300 <parse_assignment>:
		default:
		usart_puts("Invalid command\n\r");
		break;
	}
}
unsigned long parse_assignment(void){
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	60 97       	sbiw	r28, 0x10	; 16
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
	char *pch;
	char cmdValue[16];
	 // Find the position the equals sign is
	 // in the string, keep a pointer to it
	 pch = strchr(command_in, '=');
 314:	6d e3       	ldi	r22, 0x3D	; 61
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	85 e8       	ldi	r24, 0x85	; 133
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 67 02 	call	0x4ce	; 0x4ce <strchr>
	 // Copy everything after that point into
	 // the buffer variable
	 strcpy(cmdValue, pch+1);
 320:	bc 01       	movw	r22, r24
 322:	6f 5f       	subi	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	ce 01       	movw	r24, r28
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <strcpy>
	 // Now turn this value into an integer and
	 // return it to the caller.
	 return atoi(cmdValue);
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 49 02 	call	0x492	; 0x492 <atoi>
 336:	bc 01       	movw	r22, r24
 338:	99 0f       	add	r25, r25
 33a:	88 0b       	sbc	r24, r24
 33c:	99 0b       	sbc	r25, r25
}
 33e:	60 96       	adiw	r28, 0x10	; 16
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <parse_query>:
unsigned long parse_query(void){
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	60 97       	sbiw	r28, 0x10	; 16
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
	char *pch;
	char cmdValue[16];
	// Find the position the equals sign is
	// in the string, keep a pointer to it
	pch = strchr(command_in, '?');
 364:	6f e3       	ldi	r22, 0x3F	; 63
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	85 e8       	ldi	r24, 0x85	; 133
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 67 02 	call	0x4ce	; 0x4ce <strchr>
	// Copy everything after that point into
	// the buffer variable
	strcpy(cmdValue, pch+1);
 370:	bc 01       	movw	r22, r24
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	ce 01       	movw	r24, r28
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <strcpy>
	// Now turn this value into an integer and
	// return it to the caller.
	return atoi(cmdValue);
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	0e 94 49 02 	call	0x492	; 0x492 <atoi>
 386:	bc 01       	movw	r22, r24
 388:	99 0f       	add	r25, r25
 38a:	88 0b       	sbc	r24, r24
 38c:	99 0b       	sbc	r25, r25
}
 38e:	60 96       	adiw	r28, 0x10	; 16
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <print_val>:
void print_val(char *id, int value){
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	28 97       	sbiw	r28, 0x08	; 8
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	18 2f       	mov	r17, r24
 3b8:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ba:	4a e0       	ldi	r20, 0x0A	; 10
 3bc:	be 01       	movw	r22, r28
 3be:	6f 5f       	subi	r22, 0xFF	; 255
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__itoa_ncheck>
	char buffer[8];
	itoa(value, buffer, 10);
	usart_putc((uint8_t *)id);
 3c6:	81 2f       	mov	r24, r17
 3c8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <usart_putc>
	usart_putc((char *)":");
 3cc:	83 e2       	ldi	r24, 0x23	; 35
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <usart_putc>
	usart_puts(buffer);
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
	usart_puts(RETURN_NEWLINE);
 3dc:	80 e2       	ldi	r24, 0x20	; 32
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
}
 3e4:	28 96       	adiw	r28, 0x08	; 8
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	08 95       	ret

000003f8 <process_command>:
}
void process_command(void){
	char *pch;
	char cmdValue[16];
	
	switch(command_in[0])
 3f8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <command_in>
 3fc:	82 34       	cpi	r24, 0x42	; 66
 3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	83 34       	cpi	r24, 0x43	; 67
 402:	31 f1       	breq	.+76     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 404:	2a c0       	rjmp	.+84     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	{
		case 'B':
			if (command_in[1] == '='){
 406:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <command_in+0x1>
 40a:	8d 33       	cpi	r24, 0x3D	; 61
 40c:	51 f4       	brne	.+20     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
				sensitivity = parse_assignment();
 40e:	0e 94 80 01 	call	0x300	; 0x300 <parse_assignment>
 412:	86 2f       	mov	r24, r22
 414:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <__data_end>
 418:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <__data_end+0x1>
				Display_brightness(sensitivity);
 41c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Display_brightness>
 420:	08 95       	ret
			
			} else if (command_in[1] == '?'){
 422:	8f 33       	cpi	r24, 0x3F	; 63
 424:	81 f4       	brne	.+32     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				usart_puts("Brightness Query \n\r");
 426:	85 e2       	ldi	r24, 0x25	; 37
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
				parse_query();
 42e:	0e 94 a8 01 	call	0x350	; 0x350 <parse_query>
				print_val((char)command_in[0], sensitivity);
 432:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <__data_end>
 436:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <__data_end+0x1>
 43a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <command_in>
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <print_val>
 444:	08 95       	ret
			}else{
				usart_puts("Invalid command\n\r");
 446:	89 e3       	ldi	r24, 0x39	; 57
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
 44e:	08 95       	ret
			}
		break;
		
		case 'C':
		usart_puts("C command has not been implemented. \n\r");
 450:	8b e4       	ldi	r24, 0x4B	; 75
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
		break;
 458:	08 95       	ret
		
		default:
		usart_puts("Invalid command\n\r");
 45a:	89 e3       	ldi	r24, 0x39	; 57
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
 462:	08 95       	ret

00000464 <main>:
	usart_puts(RETURN_NEWLINE);
}
int main(void)
{
    /* Replace with your application code */
	SPI_MasterInit();
 464:	0e 94 75 00 	call	0xea	; 0xea <SPI_MasterInit>
	Display_Init();
 468:	0e 94 88 00 	call	0x110	; 0x110 <Display_Init>
	Uart_Init();
 46c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Uart_Init>
	
	usart_puts("Hello, World!\n\r");
 470:	82 e7       	ldi	r24, 0x72	; 114
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_puts>
	usart_ok();
 478:	0e 94 1e 01 	call	0x23c	; 0x23c <usart_ok>
    while (1) 
    {
		if (command_ready == TRUE) {
 47c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <command_ready>
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	e1 f7       	brne	.-8      	; 0x47c <main+0x18>
			// Here is where we will copy
			command_copy();
 484:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <command_copy>
			// and parse the command.
			process_command();
 488:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <process_command>
			command_ready = FALSE;
 48c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <command_ready>
 490:	f5 cf       	rjmp	.-22     	; 0x47c <main+0x18>

00000492 <atoi>:
 492:	fc 01       	movw	r30, r24
 494:	88 27       	eor	r24, r24
 496:	99 27       	eor	r25, r25
 498:	e8 94       	clt
 49a:	21 91       	ld	r18, Z+
 49c:	20 32       	cpi	r18, 0x20	; 32
 49e:	e9 f3       	breq	.-6      	; 0x49a <atoi+0x8>
 4a0:	29 30       	cpi	r18, 0x09	; 9
 4a2:	10 f0       	brcs	.+4      	; 0x4a8 <atoi+0x16>
 4a4:	2e 30       	cpi	r18, 0x0E	; 14
 4a6:	c8 f3       	brcs	.-14     	; 0x49a <atoi+0x8>
 4a8:	2b 32       	cpi	r18, 0x2B	; 43
 4aa:	41 f0       	breq	.+16     	; 0x4bc <atoi+0x2a>
 4ac:	2d 32       	cpi	r18, 0x2D	; 45
 4ae:	39 f4       	brne	.+14     	; 0x4be <atoi+0x2c>
 4b0:	68 94       	set
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <atoi+0x2a>
 4b4:	0e 94 84 02 	call	0x508	; 0x508 <__mulhi_const_10>
 4b8:	82 0f       	add	r24, r18
 4ba:	91 1d       	adc	r25, r1
 4bc:	21 91       	ld	r18, Z+
 4be:	20 53       	subi	r18, 0x30	; 48
 4c0:	2a 30       	cpi	r18, 0x0A	; 10
 4c2:	c0 f3       	brcs	.-16     	; 0x4b4 <atoi+0x22>
 4c4:	1e f4       	brtc	.+6      	; 0x4cc <atoi+0x3a>
 4c6:	90 95       	com	r25
 4c8:	81 95       	neg	r24
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	08 95       	ret

000004ce <strchr>:
 4ce:	fc 01       	movw	r30, r24
 4d0:	81 91       	ld	r24, Z+
 4d2:	86 17       	cp	r24, r22
 4d4:	21 f0       	breq	.+8      	; 0x4de <strchr+0x10>
 4d6:	88 23       	and	r24, r24
 4d8:	d9 f7       	brne	.-10     	; 0x4d0 <strchr+0x2>
 4da:	99 27       	eor	r25, r25
 4dc:	08 95       	ret
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	cf 01       	movw	r24, r30
 4e2:	08 95       	ret

000004e4 <strcpy>:
 4e4:	fb 01       	movw	r30, r22
 4e6:	dc 01       	movw	r26, r24
 4e8:	01 90       	ld	r0, Z+
 4ea:	0d 92       	st	X+, r0
 4ec:	00 20       	and	r0, r0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <strcpy+0x4>
 4f0:	08 95       	ret

000004f2 <__itoa_ncheck>:
 4f2:	bb 27       	eor	r27, r27
 4f4:	4a 30       	cpi	r20, 0x0A	; 10
 4f6:	31 f4       	brne	.+12     	; 0x504 <__itoa_ncheck+0x12>
 4f8:	99 23       	and	r25, r25
 4fa:	22 f4       	brpl	.+8      	; 0x504 <__itoa_ncheck+0x12>
 4fc:	bd e2       	ldi	r27, 0x2D	; 45
 4fe:	90 95       	com	r25
 500:	81 95       	neg	r24
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__utoa_common>

00000508 <__mulhi_const_10>:
 508:	7a e0       	ldi	r23, 0x0A	; 10
 50a:	97 9f       	mul	r25, r23
 50c:	90 2d       	mov	r25, r0
 50e:	87 9f       	mul	r24, r23
 510:	80 2d       	mov	r24, r0
 512:	91 0d       	add	r25, r1
 514:	11 24       	eor	r1, r1
 516:	08 95       	ret

00000518 <__utoa_ncheck>:
 518:	bb 27       	eor	r27, r27

0000051a <__utoa_common>:
 51a:	fb 01       	movw	r30, r22
 51c:	55 27       	eor	r21, r21
 51e:	aa 27       	eor	r26, r26
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	aa 1f       	adc	r26, r26
 526:	a4 17       	cp	r26, r20
 528:	10 f0       	brcs	.+4      	; 0x52e <__utoa_common+0x14>
 52a:	a4 1b       	sub	r26, r20
 52c:	83 95       	inc	r24
 52e:	50 51       	subi	r21, 0x10	; 16
 530:	b9 f7       	brne	.-18     	; 0x520 <__utoa_common+0x6>
 532:	a0 5d       	subi	r26, 0xD0	; 208
 534:	aa 33       	cpi	r26, 0x3A	; 58
 536:	08 f0       	brcs	.+2      	; 0x53a <__utoa_common+0x20>
 538:	a9 5d       	subi	r26, 0xD9	; 217
 53a:	a1 93       	st	Z+, r26
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	79 f7       	brne	.-34     	; 0x51e <__utoa_common+0x4>
 540:	b1 11       	cpse	r27, r1
 542:	b1 93       	st	Z+, r27
 544:	11 92       	st	Z+, r1
 546:	cb 01       	movw	r24, r22
 548:	0c 94 a6 02 	jmp	0x54c	; 0x54c <strrev>

0000054c <strrev>:
 54c:	dc 01       	movw	r26, r24
 54e:	fc 01       	movw	r30, r24
 550:	67 2f       	mov	r22, r23
 552:	71 91       	ld	r23, Z+
 554:	77 23       	and	r23, r23
 556:	e1 f7       	brne	.-8      	; 0x550 <strrev+0x4>
 558:	32 97       	sbiw	r30, 0x02	; 2
 55a:	04 c0       	rjmp	.+8      	; 0x564 <strrev+0x18>
 55c:	7c 91       	ld	r23, X
 55e:	6d 93       	st	X+, r22
 560:	70 83       	st	Z, r23
 562:	62 91       	ld	r22, -Z
 564:	ae 17       	cp	r26, r30
 566:	bf 07       	cpc	r27, r31
 568:	c8 f3       	brcs	.-14     	; 0x55c <strrev+0x10>
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
